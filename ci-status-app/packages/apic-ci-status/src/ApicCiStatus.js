import { LitElement, html, css } from 'lit-element';
import { routerMixin, routerLinkMixin } from 'lit-element-router/router-mixin/router-mixin.js';
import '@anypoint-web-components/anypoint-listbox/anypoint-listbox.js';
import '@anypoint-web-components/anypoint-item/anypoint-item.js';
import '@anypoint-web-components/anypoint-button/anypoint-button.js';
import '@anypoint-web-components/anypoint-menu-button/anypoint-menu-button.js';
import '@anypoint-web-components/anypoint-button/anypoint-icon-button.js';
import '@anypoint-web-components/anypoint-styles/colors.js';

import { UserStatus } from './UserStatus.js';
import { userImageTemplate, userIconTemplate } from './utils.js';
import '../../page-main/page-main.js';
import '../../page-tokens/page-tokens.js';
import '../../page-tokens/page-add-token.js';
import '../../page-changelog/page-changelog.js';

const defaultTitle = 'API Components status';
const gaId = 'UA-71458341-7';

/* global gtag */

export class ApicCiStatus extends routerLinkMixin(routerMixin(LitElement)) {
  static get routes() {
    return [
      {
        name: 'intro',
        pattern: '/(intro)?',
        data: { title: defaultTitle },
      },
      {
        name: 'tokens',
        pattern: '/tokens',
        data: { title: 'API tokens' },
      },
      {
        name: 'add-token',
        pattern: '/tokens/add',
        data: { title: 'Create API token' },
      },
      {
        name: 'changelog',
        pattern: '/changelog',
        data: { title: 'Changelog' },
      },
      {
        name: 'not-found',
        pattern: '*',
        data: { title: defaultTitle },
      },
    ];
  }

  static get properties() {
    return {
      /**
       * A currently rendered page
       */
      page: { type: String },
      /**
       * API base URI
       */
      apiBase: { type: String },
      /**
       * True when application loads some data from the server.
       */
      loading: { type: Boolean },
      /**
       * Current page title
       */
      title: { type: String },
      /**
       * An API token to use to authenticate API requests.
       *
       * Cureently it is not in use. There's no model to
       * retreive valid session token from the server and refresh it
       * when expired.
       * Currently the application is API server session based, meaning a
       * valid session cookie must be present.
       *
       * @todo (pawel): base API calls on session token.
       * The token should be generated by the application when
       * the user logs in with expiration time sat to an hour (?).
       * The application should receive this tokne with `/me` request and
       * use it for authorization instead of cookies. In this case `credentials`
       * property should be removed from `fetch` configuration.
       */
      apiToken: { type: String },
    };
  }

  get authReturn() {
    const rtn = encodeURIComponent(window.location.href);
    const base = this.apiBase.replace('/v1/', '');
    const url = `${base}/auth/login?return=${rtn}`;
    return url;
  }

  get logoutReturn() {
    const rtn = encodeURIComponent(window.location.href);
    const base = this.apiBase.replace('/v1/', '');
    const url = `${base}/auth/login?logout=${rtn}`;
    return url;
  }

  constructor() {
    super();
    this.page = 'main';
    this.apiBase = window.ApicCiStatus.apiBase;

    this.userStatus = new UserStatus(this.apiBase);
    this._clickHandler = this._clickHandler.bind(this);
  }

  connectedCallback() {
    super.connectedCallback();
    this.addEventListener('click', this._clickHandler);
    this.loadUserState();
  }

  async loadUserState() {
    try {
      await this.userStatus.getUser();
    } catch (e) {
      // ..
    }
    this.requestUpdate();
  }

  _clickHandler(e) {
    if (!e.composed) {
      return;
    }
    const path = e.composedPath();
    const anhor = path.find((node) => node.nodeName === 'A');
    if (!anhor) {
      return;
    }
    const href = anhor.getAttribute('href');
    if (!href) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    this.navigate(href);
  }

  __clickPageLink(ev) {
    ev.preventDefault();
    let { target } = ev;
    if (target.localName === 'anypoint-item') {
      [target] = target.children;
    }
    if (!target.href) {
      return;
    }
    this.navigate(target.href);
  }

  onRoute(route, params, query, data) {
    const routeData = data || {};
    const title = routeData.title || defaultTitle;
    let finalRoute;
    if (route === '/') {
      finalRoute = 'intro';
    } else {
      finalRoute = route;
    }
    this.title = title;
    this.page = finalRoute;
    document.head.querySelector('title').innerText = title;
    if (!this.__gaRouteInitialized) {
      // prohibits sending pageview when initializing
      this.__gaRouteInitialized = true;
      return;
    }
    gtag('config', gaId, { page_path: `/${route}` });
  }

  _renderPage() {
    switch (this.page) {
      case 'intro':
        return html`
          <page-main></page-main>
        `;
      case 'tokens':
        return html`
          <page-tokens
            .userStatus="${this.userStatus}"
            .apiBase="${this.apiBase}"
            .apiToken="${this.apiToken}"
          ></page-tokens>
        `;
      case 'add-token':
        return html`
          <page-add-token
            .userStatus="${this.userStatus}"
            .apiBase="${this.apiBase}"
            .apiToken="${this.apiToken}"
          ></page-add-token>
        `;
      case 'changelog':
        return html`
          <page-changelog
            .apiBase="${this.apiBase}"
            .apiToken="${this.apiToken}"
          ></page-changelog>
        `;
      default:
        return html`
          <p>Page not found try going to <a href="/">Main</a></p>
        `;
    }
  }

  render() {
    const { userStatus, title, page } = this;
    return html`
      <header>
        <a href="/intro" class="main-link">
          <img src="images/arc-icon.png" class="app-icon" alt="ARC logo" />
        </a>
        <h1>${title}</h1>
        ${userStatus.loggedIn ? this._userHeaderTemplate() : this._logInTemplate()}
      </header>
      <div class="content">
        <nav>
          <anypoint-listbox role="menu" .selected="${page}" attrforselected="route">
            ${this._navTemplate()}
          </anypoint-listbox>
        </nav>
        <main>
          ${this._renderPage()}
        </main>
      </div>
    `;
  }

  _logInTemplate() {
    const { authReturn } = this;
    return html`
    <a href="${authReturn}" class="log-in-btn">
      <anypoint-button>Log in</anypoint-button>
    </a>
    `;
  }

  _userHeaderTemplate() {
    const { userStatus, logoutReturn } = this;
    const img = userStatus.user && userStatus.user.imageUrl;
    return html`
    <anypoint-menu-button horizontalalign="right">
      <anypoint-icon-button slot="dropdown-trigger">
        ${img ? userImageTemplate(img) : userIconTemplate()}
      </anypoint-icon-button>
      <anypoint-listbox slot="dropdown-content" class="user-menu">
        <a href="/tokens">
          <anypoint-item>Tokens</anypoint-item>
        </a>
        <a href="${logoutReturn}">
          <anypoint-item>Log out</anypoint-item>
        </a>
      </anypoint-listbox>
    </anypoint-menu-button>
    `;
  }

  _navTemplate() {
    const states = [
      ['/intro', 'intro', 'Introduction', 'Activate for introduction page'],
      ['/tests', 'tests', 'Tests', 'Activate for list of tests'],
      ['/changelog', 'changelog', 'Change log', 'Activate for components change log'],
    ];

    return states.map(
      ([href, route, label, ariaLabel]) => html`
        <anypoint-item role="none" tabindex="-1" @click="${this.__clickPageLink}" route="${route}">
          <a href="${href}" tabindex="-1" role="menuitem" aria-label="${ariaLabel}">
            ${label}
          </a>
        </anypoint-item>
      `,
    );
  }

  static get styles() {
    return [
      css`
        :host {
          min-height: 100vh;
          --dark-divider-opacity: 0.12;
          display: flex;
          flex-direction: column;

          --anypoiont-dropdown-shaddow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),
            0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.4);
        }

        a {
          text-decoration: none;
          color: inherit;
          outline: none;
        }

        a[role='menuitem'] {
          font-size: 0.85rem;
        }

        header {
          padding: 12px 24px;
          background-color: #eceef1;
          height: 72px;
          color: #000;
          display: flex;
          align-items: center;
        }

        header h1 {
          font-size: 24px;
          font-weight: 400;
          letter-spacing: -0.012em;
          line-height: 32px;
          flex: 1;
        }

        .content {
          display: flex;
          align-items: stretch;
          flex-direction: row;
          flex: 1;
        }

        anypoint-listbox[role='menu'] {
          width: 256px;
          margin-right: 12px;
          height: 100%;
        }

        anypoint-listbox[role='menu'] anypoint-item {
          min-height: 32px;
        }

        main {
          max-width: 1440px;
          background-color: #fff;
          padding: 0 40px;
          flex: 1;
        }

        .app-icon {
          width: 64px;
          height: 64px;
        }

        .user-icon {
          width: 24px;
          height: 24px;
          display: inline-block;
          border-radius: 50%;
          overflow: hidden;
        }

        .user-menu {
          background-color: #fff;
        }
      `,
    ];
  }
}
